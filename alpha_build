import random

#Variables
user_info = {'12345':'12345', '791':'tomatosoup1', 'hide on bush':'iamfaker'} #an "expanded" list with password info for each user

#login program - not integrated yet
def log_in():
    uid_login = ''
    while uid_login not in user_info:
        uid_login = input('Please input your username: ')
        uid_password = input('Please input your password: ')
        if uid_login not in user_info:
            print('Username does not match our records, please try again!')
        else:
            while uid_password != user_info.get(uid_login):
                print('Password does not match our records, please try again!')
                uid_password = input('Please input your password: ')
    uid_active = uid_login
    print('Login successful! Welcome ' + uid_active)

#shuffler program
def shuffler():
    # generating program variables
    deck = []
    # starting shuffle
    suits = ['\u2660', '\u2661', '\u2662', '\u2663']
    ranks = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']
    for suit in suits:
        for rank in ranks:
            deck.append(rank+suit)
    random.shuffle(deck)
    return deck

#score calculator
def score_calc(active_hand):
    #generating program variables
    alpha_rank = 'JQK'
    ace_rank = 'A'
    active_score = 0
    hand_card = ''
    ace_count = 0

    #deciphering the card
    for hand_card in active_hand:
        if hand_card[0] in alpha_rank or hand_card[1] =='0': #checking if the card score is JQK (10)
            active_score = active_score + 10
        elif hand_card[0] in ace_rank: #checking if the card is an ace (1/11)
            ace_count = ace_count + 1
        else:   #confirming card is a number (1-9)
            active_score =  active_score + int(hand_card[0])

    #calculating for aces
    if ace_count > 0:
        if active_score + 10 + ace_count > 21: #checking if the situation is a hard ace
            active_score = active_score + ace_count
        else:
            active_score = active_score + 10 + ace_count #checking if the situation is a soft ace
    return active_score

#program starts
print('Starting game!')
bust_check = False
player_hand = []
dealer_hand = []
player_status = 'D' #sets player status to "draw", triggering while loop
decision_check = 'a' #sets player's decision check as value outside range, forcing player to input one of the selected elements

active_deck = shuffler() #shuffling cards

#setting dealer's hand
dealer_hand.append(active_deck.pop())
dealer_hand.append(active_deck.pop())
dealer_score = score_calc(dealer_hand)
print('The dealer\'s current hand is: ')
print('XX, ' + dealer_hand[1])

#player phase
#draws 2 cards for player
player_hand.append(active_deck.pop())
player_hand.append(active_deck.pop())
print('Your current hand is: ')
print(', '.join(player_hand))
player_score = score_calc(player_hand)
if player_score == 21 and len(player_hand) == 2:
    player_status = 'B'
    print('Player has Blackjack!')

#add split(split 1 deck into 2), double down (up to double bet), surrender(returns half)
#add insurance (dealer ace) - adds half initial wager in insurance, dealer checks for blackjack, if dealer has blackjack, player loses but gets 2:1 odds on insurance bet

while player_status == 'D':
    if player_score > 21:
        player_status = 'L'
        print('Player busted!')
    elif player_score <= 21:
        decision_check = 'a'
        while decision_check not in 'SsHh':
            decision_check = input('What do you want to do? (S)tay or (H)it: ')
        if decision_check in 'Ss':
            player_status = 'S'
            print('You have chosen to stay')
        elif decision_check in 'Hh':
            player_status = 'D'  # D causes another draw
            current_draw = active_deck.pop() #draws card
            print('You have drawn a ' + current_draw)
            player_hand.append(current_draw) #adds card to hand
            print('The dealer\'s current hand is: ')
            print('XX, ' + dealer_hand[1])
            print('Your current hand is: ')
            print(', '.join(player_hand)) #shows the hand to the player
            player_score = score_calc(player_hand) #calculates the score

if player_status == 'S':
    #showing player score
    print('Your current score is: ' + str(player_score))

    #dealer phase
    print('The dealer\'s current hand is: ')
    print(', '.join(dealer_hand))
    while dealer_score < 17 and player_status != 'W':
        print('The dealer is drawing a card')
        dealer_hand.append(active_deck.pop())
        print('The dealer\'s current hand is: ')
        print(', '.join(dealer_hand))
        dealer_score = score_calc(dealer_hand)
        if dealer_score > 21:
            print('Dealer has gone bust!')
            player_status = 'W'
    if player_status != 'W':
        print('The dealer has finished drawing') #learn how to break out of loops to nullify this if-statement

    #printing scores
    if player_status != 'W':
        print('The dealer\'s current hand is: ')
        print(', '.join(dealer_hand))
        print('The dealer\'s score is: ' + str(dealer_score))
        print('Your current hand is: ')
        print(', '.join(player_hand))
        print('The player\'s score is: ' + str(player_score))

        #performing the last calculation
        if player_score < dealer_score:
            print('Dealer has higher score.')
            player_status = 'L'
        elif player_score > dealer_score:
            print('Player has higher score.')
            player_status = 'W'
        else:
            print('Both have equal scores.')
            player_status = 'P'

if player_status in 'BW':
    print('Player wins!')
elif player_status == 'L':
    print('Player loses! Game over!')
elif player_status == 'P':
    print('Pushed hand! Bet returned!')
else:
    print('Error! Game unable to ascertain status, please restart.')

#odds 3:2 or 6:5
#10bet 15(3:2)
